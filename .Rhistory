## If 1 independent variable.
m1 <- which(apply(matchnames, 1, "%in%", comp_names[[1]]))
m2 <- which(apply(matchnames, 1, "%in%", comp_names[[2]]))
ci <- which(c(m1, m2) == curr_ind)
# Return is ordered such that the row corresponding to curr_ind is always the first.
return(c(c(m1, m2)[ci], c(m1, m2)[-ci]))
} else {
## If more than 1 independent variable.
m1 <- which(colSums(apply(matchnames, 1, "%in%", comp_names[[1]])) == length(matchnames))
m2 <- which(colSums(apply(matchnames, 1, "%in%", comp_names[[2]])) == length(matchnames))
ci <- which(c(m1, m2) == curr_ind)
# Return is ordered such that the row corresponding to curr_ind is always the first.
return(c(c(m1, m2)[ci], c(m1, m2)[-ci]))
}
}
#####################
# Draw statistical significance indicators for x-axis variable categories.
# For each pair of categories, see if there is at least one significant difference
## Amongst all biologically relevant comparisons that involve comparing the two categories in the interactions.
#####################
# For particular row in the graphing data, find all of the pairwise comparison tests that involve
## the specific category of the x-axis variable.
if((length(xvar_ind) == 1)) {
# if((length(xvar_ind) == 1) && (box_graph_df$xmax[jj] - box_graph_df$linex[jj] > 1)) {
relevant_x_rows <- (unlist(lapply(comp_rows, relevant_row_find, comp_ind = xvar_ind,
curr_ind = jj, sum_df = box_graph_df, comp_var = xvar,
match_var_names = box_vars)))
if(sum(relevant_x_rows) != 0){
# Find if there are any statistically significant comparisons involving combination
## of categories for the row in graphing data frame
## where the difference is between category of xvar in particular row and another xvar category.
ast_x_rows <- which(tukey_res$pvalue < 0.05 & relevant_x_rows)
if(length(ast_x_rows) != 0) {
# If at least one statistically significant test, add asterisk on plot
## Will appear on top of category.
# Find the rows in graphing data that are associated with significant differences vs. the current row.
x_lines <- lapply(comp_rows[ast_x_rows], match_row_find, curr_ind = jj, sum_df = box_graph_df,
match_var_names = box_vars)
# Find where dotted lines connecting statistically significantly differrent categories should go.
## Will connect the asterisk corresponding to current graphing data frame row
## to the seperator line, above the categories that it is statistically significantly different from.
x_lines_df <- data.frame(x = box_graph_df$linex[jj],
y = box_graph_df$asty2[jj],
xend = box_graph_df$linex[unlist(lapply(x_lines, "[[", 2))],
yend = box_graph_df$asty2[jj])
x_var_names <- box_graph_df[jj, box_vars, drop = FALSE] %>% slice(rep(1:n(), each = length(x_lines)))
x_lines_df <- dplyr::bind_cols(x_lines_df, x_var_names)
## Draw dotted lines connecting significantly different pairs.
if(pointdodge != ""){
suppressWarnings(eval(parse(text = paste0("x_lines_df <- left_join(x_lines_df, colorframe, by = c('",
pointdodge, "' = 'val'))" ))))
x_lines_df2 <- x_lines_df[which(x_lines_df$xend > x_lines_df$x), ]
if(nrow(x_lines_df2) > 0){
# box_graph_df$asty3[jj] <- box_graph_df$asty2[xy_counter]
xy_counter <- xy_counter + 1
box_graph_df$astx[jj] <- "*"
if(!ast_bunch){
p <- p +
geom_errorbar(aes_string(xmin = "x", y = "y", xmax = "xend", color = "color"),
data = x_lines_df2, show.legend = FALSE,
width = (max(box_graph_df$asty2) - min(box_graph_df$ymin.y)) * space_const * 0.3,
linewidth = 0.5, alpha = 1)
} else {
box_graph_df$astx[jj] <- "*"
box_graph_df$astx[unlist(lapply(x_lines, "[[", 2))] <- "*"
}
}
} else {
x_lines_df2 <- x_lines_df[which(x_lines_df$xend > x_lines_df$x), ]
if(nrow(x_lines_df2) > 0){
# box_graph_df$asty3[jj] <- box_graph_df$asty2[xy_counter]
xy_counter <- xy_counter + 1
box_graph_df$astx[jj] <- "*"
if(!ast_bunch){
p <- p +
geom_errorbar(aes_string(xmin = "x", y = "y", xmax = "xend"),
data = x_lines_df, show.legend = FALSE,
width = (max(box_graph_df$ymax.y) - min(box_graph_df$ymin.y)) * space_const * 0.3,
linewidth = 0.5, alpha = 1)
} else {
box_graph_df$astx[jj] <- "*"
box_graph_df$astx[unlist(lapply(x_lines, "[[", 2))] <- "*"
}
}
}
}
}
}
#####################
# Draw statistical significance indicators for pointdodge variable categories.
# For each pair of categories, see if there is at least one significant difference
## Amongst all biologically relevant comparisons that involve comparing the two categories in the interactions.
#####################
# For particular row in the graphing data, find all of the pairwise comparison tests that involve
## the specific category of the pointdodge variable.
if(length(pd_ind) == 1) {
relevant_pd_rows <- (unlist(lapply(comp_rows, relevant_row_find, comp_ind = pd_ind,
curr_ind = jj, sum_df = box_graph_df, comp_var = pointdodge,
match_var_names = box_vars)))
if(sum(relevant_pd_rows) != 0){
# Find if there are any statistically significant comparisons involving combination
## of categories for the row.
ast_pd_rows <- which(tukey_res$pvalue < 0.05 & relevant_pd_rows)
if(length(ast_pd_rows) != 0){
# If at least one statistically significant test, add asterisk on plot
## Will appear on top of category.
# Find the rows in graphing data that are associated with significant differences vs. the current row.
pd_lines <- lapply(comp_rows[ast_pd_rows], match_row_find, curr_ind = jj, sum_df = box_graph_df,
match_var_names = box_vars)
# Find where dotted lines connecting statistically significantly differrent categories should go.
## Output will connect the asterisk corresponding to current graphing data frame row
## to the seperator line, above the categories that it is statistically significantly different from.
pd_lines_df <- data.frame(x = box_graph_df$linex[jj],
y = box_graph_df$asty[jj],
xend = box_graph_df$linex[unlist(lapply(pd_lines, "[[", 2))],
yend = box_graph_df$asty[jj])
pd_var_names <- box_graph_df[jj, box_vars, drop = FALSE] %>% slice(rep(1:n(), each = length(pd_lines)))
pd_lines_df <- dplyr::bind_cols(pd_lines_df, pd_var_names)
## Draw dotted lines connecting significantly different pairs.
suppressWarnings(eval(parse(text = paste0("pd_lines_df <- left_join(pd_lines_df, colorframe, by = c('", pointdodge, "' = 'val'))" ))))
pd_lines_df2 <- pd_lines_df[which(pd_lines_df$xend > pd_lines_df$x), ]
if(nrow(pd_lines_df2) > 0){
box_graph_df$astpd[jj] <- "*"
if(TRUE){
p <- p + geom_errorbar(aes_string(xmin = "x", y = "y", xmax = "xend", color = "color"),
data = pd_lines_df2, show.legend = FALSE,
width = (max(box_graph_df$asty2) - min(box_graph_df$ymin.y)) * space_const * 0.3,
linewidth = 0.5, alpha = 1)
} else {
box_graph_df$astpd[jj] <- "*"
}
}
}
}
}
}
####################################
# Add asterisks on plot as required.
if(pointdodge != "") {
## Pointdodge asterisks
p <- p +
geom_text(aes_string(x = "linex", y = "asty", label = "astpd", color = "color"),
data = box_graph_df, size = 7, show.legend = FALSE) +
scale_color_identity()
## xvar asterisks
if(length(facet_vars) > 0){
p <- p + geom_text(aes_string(x = "linex", y = "asty2", label = "astx", color = "color"),
data = box_graph_df, size = 7, show.legend = FALSE)
} else {
p <- p + geom_text(aes_string(x = "linex", y = "asty2", label = "astx", color = "color"),
data = box_graph_df, size = 7, show.legend = FALSE)
}
} else {
## Pointdodge asterisks
p <- p +
geom_text(aes_string(x = "linex", y = "asty", label = "astpd"),
data = box_graph_df, size = 7, show.legend = FALSE)
## xvar asterisks
if(length(facet_vars) > 0){
p <- p + geom_text(aes_string(x = "linex", y = "asty2", label = "astx"),
data = box_graph_df, size = 7, show.legend = FALSE)
} else {
p <- p + geom_text(aes_string(x = "linex", y = "asty2", label = "astx"),
data = box_graph_df, size = 7, show.legend = FALSE)
}
}
} else {
box_graph_df$asty2 <- box_graph_df$ymax
box_graph_df$ymin.y <- box_graph_df$ymin
box_graph_df$ymax.y <- box_graph_df$ymax
}
# Add plot labels.
if(ast_bunch){
note <- "* Refer to Tukey results table for x variable comparisons"
p <- p + labs(x = xvar_name, y = resp_name, fill = pointdodge_name,
subtitle = substitute(italic(x), list(x = note)))
} else {
p <- p + labs(x = xvar_name, y = resp_name, fill = pointdodge_name)
}
# Set y-axis limits of plot, either default or as selected by user.
if(!(is.na(yax_min)) && !(is.na(yax_max)) && !(is.null(yax_min)) && !(is.null(yax_max))) {
p <- p + scale_y_continuous(limits = c(yax_min, yax_max), expand = expansion(mult = c(0, 0)))
} else {
if(xvar != ""){
p <- p + scale_y_continuous(limits = c(min(c(box_graph_df$ymin.y, box_graph_df$mid - box_graph_df$sds)),
max(c(box_graph_df$asty2[which(box_graph_df$astx != "")], box_graph_df$yline2, box_graph_df$mid + box_graph_df$sds)) +
(max(box_graph_df$ymax.y) - min(box_graph_df$ymin.y)) * 0.05),
expand = expansion(mult = c(0.035, 0.035)))
} else {
p <- p + scale_y_continuous(limits = c(min(c(box_graph_df$ymin.y, box_graph_df$mid - box_graph_df$sds)),
max(c(box_graph_df$asty[which(box_graph_df$astpd != "")], box_graph_df$mid + box_graph_df$sds)) +
(max(box_graph_df$ymax.y) - min(box_graph_df$ymin.y)) * 0.05),
expand = expansion(mult = c(0.035, 0.035)))
}
}
# Saves graphs to designated folder from user selections in GUI.
if(grepl(".svg", savename)){
svglite(paste0(args$Output, "/", savename), width = x_width / 2.5, height = y_height / 2.5)
print(p)
dev.off()
} else {
ggsave(savename, plot = p, path = args$Output, width = x_width, height = y_height, units = "cm", dpi = 300)
}
}
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(response_vars[ii], mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, order by first appearance.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
# Run graph maker.
graph_file  <- paste0(response_vars[ii], args$I)
if((!is.null(graph_vars$ShowStats)) && (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
args$Output <- "/D/Resp"
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(response_vars[ii], mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, order by first appearance.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
# Run graph maker.
graph_file  <- paste0(response_vars[ii], args$I)
if((!is.null(graph_vars$ShowStats)) && (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
response_var_names[ii], xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
transforms_resp <- unlist(strsplit(transform_set[ii], "@"))
for(jj in 1:length(transforms_resp)){
new_colname <- paste0(response_vars[ii], "_", transforms_resp[jj])
if(length(strsplit(response_var_names[ii], "\\(")[[1]]) == 1){
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj])
} else {
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj], " (",
strsplit(response_var_names[ii], "\\(")[[1]][2:length(strsplit(response_var_names[ii], "\\(")[[1]])])
}
# Create mouse-wise summary data for graphing.
if(!is.null(tukey_res_list[[new_colname]])){
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
# Run graph maker.
graph_file  <- paste0(new_colname, args$I)
if((!is.null(graph_vars$ShowStats)) || (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
}
}
transforms_resp <- unlist(strsplit(transform_set[ii], "@"))
for(jj in 1:length(transforms_resp)){
new_colname <- paste0(response_vars[ii], "_", transforms_resp[jj])
if(length(strsplit(response_var_names[ii], "\\(")[[1]]) == 1){
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj])
} else {
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj], " (",
strsplit(response_var_names[ii], "\\(")[[1]][2:length(strsplit(response_var_names[ii], "\\(")[[1]])])
}
# Create mouse-wise summary data for graphing.
if(!is.null(tukey_res_list[[new_colname]])){
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
# Run graph maker.
graph_file  <- paste0(new_colname, args$I)
if((!is.null(graph_vars$ShowStats)) && (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
}
}
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
new_colname
new_graphname
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
graph_v
graph_df <- tbl0 %>%
# dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
graph_df
graph_v
graph_vars
graph_file  <- paste0(new_colname, args$I)
if((!is.null(graph_vars$ShowStats)) && (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(response_vars[ii], xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[response_vars[ii]]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
}
transforms_resp <- unlist(strsplit(transform_set[ii], "@"))
for(jj in 1:length(transforms_resp)){
new_colname <- paste0(response_vars[ii], "_", transforms_resp[jj])
if(length(strsplit(response_var_names[ii], "\\(")[[1]]) == 1){
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj])
} else {
new_graphname <- paste0(strsplit(response_var_names[ii], "\\(")[[1]][1], ", ", transforms_resp[jj], " (",
strsplit(response_var_names[ii], "\\(")[[1]][2:length(strsplit(response_var_names[ii], "\\(")[[1]])])
}
# Create mouse-wise summary data for graphing.
if(!is.null(tukey_res_list[[new_colname]])){
graph_df <- tbl0 %>%
dplyr::filter(Breath_Inclusion_Filter == 1) %>%
group_by_at(c(graph_v, "MUID")) %>%
dplyr::summarise_at(new_colname, mean, na.rm = TRUE) %>%
ungroup() %>% na.omit()
# Set order of categories in variables as specified by the user, if specified.
## If not, keep current order.
graph_df <- graph_reorder(graph_df, graph_v, graph_vars, tbl0)
# Run graph maker.
graph_file  <- paste0(new_colname, args$I)
if((!is.null(graph_vars$ShowStats)) && (!is.na(graph_vars$ShowStats))){
if(graph_vars$ShowStats == "None"){
try(graph_make(new_colname, xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[new_colname]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = FALSE,
ast_bunch = FALSE))
} else if (graph_vars$ShowStats == "Lines_and_Ticks") {
try(graph_make_ticks(new_colname, xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[new_colname]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
} else {
try(graph_make(new_colname, xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[new_colname]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
} else {
try(graph_make(new_colname, xvar, pointdodge, facet1,
facet2, graph_df, tbl0, tukey_res_list[[new_colname]],
interaction_vars, graph_file, other = FALSE,  inc_filter = TRUE,
new_graphname, xvar_wu, pointdodge_wu,
yax_min = ymins[ii], yax_max = ymaxes[ii], ast_gen = TRUE,
ast_bunch = FALSE))
}
}
}
